package com.beater.vehicle.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import com.beater.vehicle.repository.VehicleRepository;
import com.beater.vehicle.model.Vehicle;

@RestController
@RequestMapping("/vehicle/")
@CrossOrigin("http://localhost:3000/")
public class VehicleController {

	@Autowired
	private VehicleRepository vehicleRepository;

	@GetMapping("vehicles")
	public List<Vehicle> getAllVechicle() {
		return vehicleRepository.findAll();
	}

	@PostMapping("vehicles")
	public Vehicle createVehicle(@RequestBody Vehicle vehicle) {
		return vehicleRepository.save(vehicle);
	}

	@GetMapping("vehicle")
	public List<Vehicle> getVehicles(
			@RequestParam(value = "pageNo", defaultValue = "1", required = false) int pageNo,
			@RequestParam(value = "pageSize", defaultValue = "1", required = false) int pageSize,
			@RequestParam(value = "sortBy", defaultValue = "vehicleId", required = false) String sortBy,
			@RequestParam(value = "sortDir", defaultValue = "ASC", required = false) String sortDir) {
		Sort sort = sortDir.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending()
				: Sort.by(sortBy).descending();
		Pageable pageable = PageRequest.of(pageNo, pageSize, sort);

		Page<Vehicle> vehicles = vehicleRepository.findAll(pageable);
		List<Vehicle> listOfVehicles = vehicles.getContent();
		return listOfVehicles;

	}
	@GetMapping("vehicle/{id}")
	public Vehicle getVehicleById(@PathVariable long id) {
		return vehicleRepository.findById(id).orElseThrow();
	}
}
