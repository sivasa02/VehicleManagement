package com.beater.vehicle.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.beater.vehicle.repository.UserRepository;
import com.beater.vehicle.exception.UserNotFoundException;
import com.beater.vehicle.model.User;
import com.beater.vehicle.model.Login;


@RestController
@RequestMapping("/user/")
@CrossOrigin("http://localhost:3000/")
public class UserController{
		@Autowired
		private UserRepository userRepository;
		
		
		@GetMapping("users")
		public List<User> getAllUser(){
			return userRepository.findAll();
		}
		
		@GetMapping("users/{i}") 
		public User getAllUserById(@PathVariable long i){
			return userRepository.findById(i).orElseThrow(()-> new UserNotFoundException("User Not Found"));
		}
		@GetMapping("user/{id}/{pwd}")
		public String getAllUserByMemberId(@PathVariable long id ,@PathVariable String pwd){
			System.out.println(id+pwd);
			if(userRepository.getById(id).getUserPwrd().equals(pwd)) {
				if(userRepository.getById(id).getIsAdmin().equals("admin")) {
					String u=userRepository.getById(id).getUserName();
					return u+",AdminUser";
				}
				else {
					return "NotAdmin";
				}
			}
//			System.out.println(userRepository.findById(i.getMemberId()));
			return null;
		}
		@PostMapping("users")
		public User createUser(@RequestBody User user) {
			return userRepository.save(user);
		}
		@DeleteMapping("users")
		public String deleteUser(@RequestParam(value="id") Long id) {
			User user=userRepository.findById(id).orElseThrow(()-> new UserNotFoundException("User not found"));
			userRepository.delete(user);
			return "Sucessfully deleted";
		}
}
